import SchemaBuilder from '@pothos/core';
import ComplexityPlugin from '@pothos/plugin-complexity';
import DataloaderPlugin from '@pothos/plugin-dataloader';
import ErrorsPlugin from '@pothos/plugin-errors';
import PrismaPlugin from '@pothos/plugin-prisma';
import type PrismaTypes from '@pothos/plugin-prisma/generated';
import RelayPlugin from '@pothos/plugin-relay';
import ScopeAuthPlugin from '@pothos/plugin-scope-auth';
import SimpleObjectsPlugin from '@pothos/plugin-simple-objects';
import TracingPlugin, { isRootField, wrapResolver } from '@pothos/plugin-tracing';
import ValidationPlugin from '@pothos/plugin-validation';
import { authScopes, type AuthContexts, type AuthScopes } from './auth.js';
import type { Context } from './context.js';
import { prisma } from './prisma.js';

/**
 * Maps database ID prefixes to GraphQL type names. Please add new types here as they are added to
 * the schema.
 */
/* @generated from schema */
/* end @generated from schema */

export const builder = new SchemaBuilder<{
  AuthContexts: AuthContexts;
  AuthScopes: AuthScopes;
  Context: Context;
  DefaultInputFieldRequiredness: true;
  PrismaTypes: PrismaTypes;
  Scalars: {
    DateTime: { Input: Date; Output: Date };
    File: { Input: never; Output: File };
    ID: { Input: number; Output: number };
  };
}>({
  plugins: [
    ComplexityPlugin,
    DataloaderPlugin,
    ErrorsPlugin,
    PrismaPlugin,
    RelayPlugin,
    ScopeAuthPlugin,
    SimpleObjectsPlugin,
    TracingPlugin,
    ValidationPlugin,
  ],
  authScopes,
  complexity: { limit: { complexity: 1500, depth: 6, breadth: 60 } },
  defaultInputFieldRequiredness: true,
  errorOptions: { defaultTypes: [Error] },
  prisma: { client: prisma, exposeDescriptions: true },
  relayOptions: {
    clientMutationId: 'omit',
    cursorType: 'String',
    encodeGlobalID: (_typename, id, {}) => id.toString(),
    decodeGlobalID(globalID, {}) {
      const [typename, id] = globalID.split(':');
      if (!typename || !id) throw new Error(`Invalid global ID: ${globalID}`);
      if (!(typename in TYPENAME_MAP)) throw new Error(`Unknown typename: ${typename}`);
      return { typename: TYPENAME_MAP[typename as keyof typeof TYPENAME_MAP], id: globalID };
    },
  },
  tracing: {
    default: (config) => isRootField(config),
    wrap: (resolver, _options, config) =>
      wrapResolver(resolver, (_error, duration) => {
        console.log(
          `Executed \u001B[36;1m${config.parentType}.${
            config.name
          }\u001B[0m in \u001B[36;1m${Number(duration.toPrecision(3))} ms\u001B[0m`
        );
      }),
  },
});

builder.queryType({});
builder.mutationType({});
