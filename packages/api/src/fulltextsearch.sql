---------------------------------
-- Generated columns & indexes --
---------------------------------
-- We can't have nice things since prisma breaks generated columns, see https://github.com/prisma/prisma/issues/15654
-- So we're using triggers instead.
-- This also allows us to query fields on tother tables, sth generated columns can't do.
--
-- Group
CREATE
OR replace FUNCTION update_group_search() returns TRIGGER AS $$ BEGIN
	NEW."search" := setweight(to_tsvector('english', NEW."name"), 'A') || setweight(to_tsvector('english', NEW."description"), 'B') || setweight(to_tsvector('english', NEW."email"), 'B') || setweight(to_tsvector('english', NEW."website"), 'C') || setweight(to_tsvector('english', NEW."uid"), 'D');

RETURN NEW;

END $$ LANGUAGE plpgsql;

CREATE TRIGGER update_group_search_trigger before
INSERT
	OR
UPDATE
	ON "Group" FOR each ROW EXECUTE PROCEDURE update_group_search();

-- User
-- drop the one generated by prisma
CREATE
OR replace FUNCTION update_user_search() returns TRIGGER AS $$ 
declare
	major_short_name text := '';
BEGIN
	major_short_name  := (select "shortName" from "Major" where "Major"."id" = NEW."majorId");
	NEW."search" := setweight(to_tsvector('english', NEW."lastName"), 'A') || setweight(to_tsvector('english', NEW."firstName"), 'A') || setweight(to_tsvector('english', NEW."nickname"), 'B') || setweight(to_tsvector('english', NEW."email"), 'B') || setweight(to_tsvector('english', NEW."phone"), 'B') || setweight(to_tsvector('english', NEW."uid"), 'C') || setweight(
		to_tsvector('english', NEW."graduationYear" :: text),
		'D'
	) || setweight(
		to_tsvector('english', major_short_name),
		'D'
	) || setweight(to_tsvector('english', NEW."description"), 'D');

RETURN NEW;

END $$ LANGUAGE plpgsql;

CREATE TRIGGER update_user_search_trigger before
INSERT
	OR
UPDATE
	ON "User" FOR each ROW EXECUTE PROCEDURE update_user_search();

-- Event
-- drop the one generated by prisma
CREATE
OR replace FUNCTION update_event_search() returns TRIGGER AS $$ 
declare
	group_name text := '';
	co_organizers_names text := '';
BEGIN
	group_name := (select "name" from "Group" where "Group"."id" = "Event"."groupId");
	co_organizers_names := (select string_agg("name", ' ') from "Group" join "_coOrganizers" on "A" = NEW."id" where "B" = "Event"."groupId");
	NEW."search" := setweight(to_tsvector('english', NEW."title"), 'A') || setweight(to_tsvector('english', NEW."description"), 'B') || setweight(to_tsvector('english', group_name), 'C') || setweight(
		to_tsvector('english', co_organizers_names),
		'C'
	) || setweight(to_tsvector('english', NEW."location"), 'D');

RETURN NEW;

END $$ LANGUAGE plpgsql;

CREATE TRIGGER update_event_search_trigger before
INSERT
	OR
UPDATE
	ON "Event" FOR each ROW EXECUTE PROCEDURE update_event_search();

-- Article
-- drop the one generated by prisma
CREATE
OR replace FUNCTION update_article_search() returns TRIGGER AS $$
declare
	group_name text := '';
BEGIN
	group_name := (select "name" from "Group" where "Group"."id" = "Article"."groupId");
	NEW."search" := setweight(to_tsvector('english', NEW."title"), 'A') || setweight(to_tsvector('english', NEW."body"), 'B') || setweight(to_tsvector('english', group_name), 'C');

RETURN NEW;

END $$ LANGUAGE plpgsql;

CREATE TRIGGER update_article_search_trigger before
INSERT
	OR
UPDATE
	ON "Article" FOR each ROW EXECUTE PROCEDURE update_article_search();
