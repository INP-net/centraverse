generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// See https://pothos-graphql.dev/docs/plugins/prisma#setup
generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Users are the people who use the app
model User {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())

  // School details
  schoolServer String? @db.VarChar(255)
  schoolUid    String? @db.VarChar(255)
  schoolEmail  String? @unique @db.VarChar(255)

  // Mandatory profile details
  email          String @unique @db.VarChar(255)
  firstName      String @db.VarChar(255)
  lastName       String @db.VarChar(255)
  majorId        Int
  major          Major  @relation(fields: [majorId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  graduationYear Int

  // Optional profile details
  address          String    @default("") @db.VarChar(255)
  birthday         DateTime?
  description      String    @default("") @db.VarChar(255)
  nickname         String    @default("") @db.VarChar(255)
  phone            String    @default("") @db.VarChar(255)
  pictureFile      String    @default("") @db.VarChar(255)
  linkCollectionId Int

  // Permissions
  admin         Boolean @default(false)
  canEditUsers  Boolean @default(false)
  canEditGroups Boolean @default(false)

  // Relationships
  articles       Article[]
  groups         GroupMember[]
  credentials    Credential[]
  linkCollection LinkCollection @relation(fields: [linkCollectionId], references: [id], onUpdate: Cascade, onDelete: Restrict)

  @@unique([schoolServer, schoolUid])
}

/// UserCandidates are users in the registration process
model UserCandidate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  email          String  @unique @db.VarChar(255)
  token          String  @unique
  emailValidated Boolean @default(false)

  schoolServer String? @db.VarChar(255)
  schoolUid    String? @db.VarChar(255)
  schoolEmail  String? @unique @db.VarChar(255)

  firstName      String @default("") @db.VarChar(255)
  lastName       String @default("") @db.VarChar(255)
  majorId        Int?
  major          Major? @relation(fields: [majorId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  graduationYear Int?
  password       String @default("") @db.VarChar(255)

  address  String    @default("") @db.VarChar(255)
  birthday DateTime?
  phone    String    @default("") @db.VarChar(255)

  @@unique([schoolServer, schoolUid])
}

/// Social link types
enum LinkType {
  Facebook
  Instagram
  Telegram
  Twitter
}

/// Ways to contact a user or a group outside of the app
model LinkCollection {
  id    Int    @id @default(autoincrement())
  links Link[]

  groups              Group[]
  studentAssociations StudentAssociation[]
  users               User[]
}

/// A single external link
model Link {
  id           Int      @id @default(autoincrement())
  collectionId Int
  type         LinkType
  value        String   @db.VarChar(255)
  createdAt    DateTime @default(now())

  collection LinkCollection @relation(fields: [collectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

/// A school syllabus
model Major {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  schools        School[]
  students       User[]
  userCandidates UserCandidate[]
}

model School {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  color String @db.VarChar(7)

  groups              Group[]
  majors              Major[]
  studentAssociations StudentAssociation[]
}

enum CredentialType {
  Password
  Token
}

/// A credential is a way to authenticate a user
model Credential {
  id        Int            @id @default(autoincrement())
  userId    Int
  type      CredentialType
  value     String         @db.VarChar(255)
  userAgent String         @default("") @db.VarChar(255)
  createdAt DateTime       @default(now())
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

/// There is one student association per school and per year
model StudentAssociation {
  id               Int    @id @default(autoincrement())
  schoolId         Int
  name             String @unique @db.VarChar(255)
  year             Int    @db.Integer
  linkCollectionId Int

  linkCollection LinkCollection @relation(fields: [linkCollectionId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  school         School         @relation(fields: [schoolId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  groups         Group[]
}

/// The different kinds of groups
enum GroupType {
  Association
  Club
  Group
  Integration
  StudentAssociationSection
}

/// A group is a collection of users
model Group {
  id                   Int       @id @default(autoincrement())
  uid                  String    @unique @db.VarChar(255)
  parentId             Int?
  /// Helper field to get a whole tree without processing all groups
  familyId             Int?
  schoolId             Int?
  studentAssociationId Int?
  name                 String    @db.VarChar(255)
  type                 GroupType
  color                String    @db.VarChar(7)

  address          String @default("") @db.VarChar(255)
  description      String @default("") @db.VarChar(255)
  email            String @default("") @db.VarChar(255)
  longDescription  String @default("")
  linkCollectionId Int

  linkCollection     LinkCollection      @relation(fields: [linkCollectionId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  articles           Article[]
  children           Group[]             @relation("parent")
  members            GroupMember[]
  parent             Group?              @relation("parent", fields: [parentId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  school             School?             @relation(fields: [schoolId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  studentAssociation StudentAssociation? @relation(fields: [studentAssociationId], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

/// The intermediate model between users and groups
model GroupMember {
  groupId         Int
  memberId        Int
  title           String   @default("") @db.VarChar(255)
  president       Boolean  @default(false)
  treasurer       Boolean  @default(false)
  canEditMembers  Boolean  @default(false)
  canEditArticles Boolean  @default(false)
  createdAt       DateTime @default(now())

  group  Group @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  member User  @relation(fields: [memberId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([groupId, memberId])
}

/// An article is a post in a group
model Article {
  id          Int      @id @default(autoincrement())
  authorId    Int?
  groupId     Int
  title       String   @db.VarChar(255)
  body        String   @db.Text
  published   Boolean  @default(false)
  homepage    Boolean  @default(false)
  createdAt   DateTime @default(now())
  publishedAt DateTime @default(now())

  author User? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  group  Group @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
