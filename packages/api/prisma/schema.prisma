generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "postgresqlExtensions"]
}

// See https://pothos-graphql.dev/docs/plugins/prisma#setup
generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [fuzzystrmatch, pgcrypto]
}

/// Users are the people who use the app
model User {
  id        String   @id @default(dbgenerated("nanoid('u:')"))
  uid       String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())

  // School details
  schoolServer String? @db.VarChar(255)
  schoolUid    String? @db.VarChar(255)
  schoolEmail  String? @unique @db.VarChar(255)

  // Mandatory profile details
  email          String @unique @db.VarChar(255)
  firstName      String @db.VarChar(255)
  lastName       String @db.VarChar(255)
  majorId        String
  major          Major  @relation(fields: [majorId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  graduationYear Int

  // Optional profile details
  address          String    @default("") @db.VarChar(255)
  birthday         DateTime?
  description      String    @default("") @db.VarChar(255)
  nickname         String    @default("") @db.VarChar(255)
  phone            String    @default("") @db.VarChar(255)
  pictureFile      String    @default("") @db.VarChar(255)
  linkCollectionId String

  // Permissions
  admin         Boolean @default(false)
  canEditUsers  Boolean @default(false)
  canEditGroups Boolean @default(false)

  // Relationships
  articles       Article[]
  groups         GroupMember[]
  credentials    Credential[]
  linkCollection LinkCollection @relation(fields: [linkCollectionId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  Reservation    Registration[]
  managedEvents  EventManager[]
  LogEntry       LogEntry[]
  Event          Event[]
  Ticket         Ticket[]
  TicketGroup    TicketGroup[]

  @@unique([schoolServer, schoolUid])
}

/// UserCandidates are users in the registration process
model UserCandidate {
  id        String   @id @default(dbgenerated("nanoid('candidate:')"))
  createdAt DateTime @default(now())

  email          String  @unique @db.VarChar(255)
  token          String  @unique
  emailValidated Boolean @default(false)

  schoolServer String? @db.VarChar(255)
  schoolUid    String? @db.VarChar(255)
  schoolEmail  String? @unique @db.VarChar(255)

  firstName      String  @default("") @db.VarChar(255)
  lastName       String  @default("") @db.VarChar(255)
  majorId        String?
  major          Major?  @relation(fields: [majorId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  graduationYear Int?
  password       String  @default("") @db.VarChar(255)

  address  String    @default("") @db.VarChar(255)
  birthday DateTime?
  phone    String    @default("") @db.VarChar(255)

  @@unique([schoolServer, schoolUid])
}

/// Ways to contact a user or a group outside of the app
model LinkCollection {
  id    String @id @default(dbgenerated("nanoid('links:')"))
  links Link[]

  groups              Group[]
  studentAssociations StudentAssociation[]
  users               User[]
  Article             Article[]
  Event               Event[]
  Ticket              Ticket[]
}

/// A single external link
model Link {
  id           String   @id @default(dbgenerated("nanoid('link:')"))
  collectionId String
  name         String   @db.VarChar(255)
  value        String   @db.VarChar(255)
  createdAt    DateTime @default(now())

  collection LinkCollection @relation(fields: [collectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

/// A school syllabus
model Major {
  id   String @id @default(dbgenerated("nanoid('major:')"))
  name String @db.VarChar(255)

  schools        School[]
  students       User[]
  userCandidates UserCandidate[]
}

model School {
  id    String @id @default(dbgenerated("nanoid('school:')"))
  uid   String @unique @db.VarChar(255)
  name  String @db.VarChar(255)
  color String @db.VarChar(7)

  groups              Group[]
  majors              Major[]
  studentAssociations StudentAssociation[]
  accessibleTickets   Ticket[]
}

enum CredentialType {
  Password
  Token
}

/// A credential is a way to authenticate a user
model Credential {
  id        String         @id @default(dbgenerated("nanoid('credential:')"))
  userId    String
  type      CredentialType
  value     String         @db.VarChar(255)
  userAgent String         @default("") @db.VarChar(255)
  createdAt DateTime       @default(now())
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

/// There is one student association per school and per year
model StudentAssociation {
  id               String @id @default(dbgenerated("nanoid('ae:')"))
  schoolId         String
  name             String @unique @db.VarChar(255)
  year             Int    @db.Integer
  linkCollectionId String

  linkCollection LinkCollection @relation(fields: [linkCollectionId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  school         School         @relation(fields: [schoolId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  groups         Group[]
}

/// The different kinds of groups
enum GroupType {
  Association
  Club
  Group
  Integration
  StudentAssociationSection
}

/// A group is a collection of users
model Group {
  id                   String    @id @default(dbgenerated("nanoid('g:')"))
  uid                  String    @unique @db.VarChar(255)
  parentId             String?
  /// Helper field to get a whole tree without processing all groups
  /// To be set to the group's id itself for root groups.
  familyId             String?
  schoolId             String?
  studentAssociationId String?
  pictureFile          String    @default("") @db.VarChar(255)
  name                 String    @db.VarChar(255)
  type                 GroupType
  color                String    @db.VarChar(7)
  selfJoinable         Boolean   @default(false)

  address          String @default("") @db.VarChar(255)
  description      String @default("") @db.VarChar(255)
  email            String @default("") @db.VarChar(255)
  longDescription  String @default("")
  linkCollectionId String

  /// Parent group, from which this group inherits its permissions
  parent   Group?  @relation("parent", fields: [parentId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  children Group[] @relation("parent")

  /// Family root, only created for performance reasons
  familyRoot     Group?  @relation("root", fields: [familyId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  familyChildren Group[] @relation("root")

  articles           Article[]
  linkCollection     LinkCollection      @relation(fields: [linkCollectionId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  members            GroupMember[]
  school             School?             @relation(fields: [schoolId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  studentAssociation StudentAssociation? @relation(fields: [studentAssociationId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  Event              Event[]
  LydiaAccount       LydiaAccount[]
  tickets            Ticket[]
  barWeeks           BarWeek[]
}

/// The intermediate model between users and groups
model GroupMember {
  groupId         String
  memberId        String
  title           String   @default("") @db.VarChar(255)
  president       Boolean  @default(false)
  treasurer       Boolean  @default(false)
  vicePresident   Boolean  @default(false)
  secretary       Boolean  @default(false)
  canEditMembers  Boolean  @default(false)
  canEditArticles Boolean  @default(false)
  createdAt       DateTime @default(now())

  group  Group @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  member User  @relation(fields: [memberId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([groupId, memberId])
}

/// An article is a post in a group
model Article {
  id          String         @id @default(dbgenerated("nanoid('a:')"))
  authorId    String?
  groupId     String
  uid         String         @db.VarChar(255)
  title       String         @db.VarChar(255)
  body        String         @db.Text
  published   Boolean        @default(false)
  homepage    Boolean        @default(false)
  createdAt   DateTime       @default(now())
  publishedAt DateTime       @default(now())
  images      Image[]
  links       LinkCollection @relation(fields: [linkCollectionId], references: [id])

  author           User?   @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  group            Group   @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Event            Event?  @relation(fields: [eventId], references: [id])
  eventId          String?
  linkCollectionId String

  @@unique([groupId, uid])
}

model Image {
  id        String   @id @default(dbgenerated("nanoid('img:')"))
  articleId String
  path      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  position  Int
  alt       String   @default("") @db.VarChar(255)

  article Article @relation(fields: [articleId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([articleId, position])
}

/// An event is a date, time and place, as well as an optional ticket
model Event {
  id               String          @id @default(dbgenerated("nanoid('e:')"))
  authorId         String?
  groupId          String
  contactMail      String
  beneficiary      LydiaAccount?   @relation(fields: [lydiaAccountId], references: [id])
  description      String          @db.VarChar(255)
  uid              String          @db.VarChar(255)
  title            String          @db.VarChar(255)
  startsAt         DateTime
  endsAt           DateTime
  location         String          @default("") @db.VarChar(255)
  visibility       EventVisibility
  managers         EventManager[]
  author           User?           @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  group            Group           @relation(fields: [groupId], references: [id])
  tickets          Ticket[]
  ticketGroups     TicketGroup[]
  articles         Article[]
  lydiaAccountId   String?
  links            LinkCollection  @relation(fields: [linkCollectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  linkCollectionId String

  @@unique([groupId, uid])
}

enum EventVisibility {
  Private
  Unlisted
  Restricted
  Public
}

/// An event manager is a user that can scan tickets, and may be able to manage the event
model EventManager {
  eventId                String
  userId                 String
  canVerifyRegistrations Boolean @default(true) // Can scan tickets
  canEdit                Boolean @default(false)
  canEditPermissions     Boolean @default(false)

  event Event @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([eventId, userId])
}

/// A ticket group allows for conditions on multiple tickets, such as an upper limit on the sum of registrations in the sub-tickets
model TicketGroup {
  id       String  @id @default(dbgenerated("nanoid('tg:')"))
  eventId  String
  authorId String?
  name     String  @db.VarChar(255)

  capacity Int      @default(0) // 0 means unlimited, capacity is on the sum of sub-tickets registrations
  tickets  Ticket[]
  event    Event    @relation(fields: [eventId], references: [id])
  author   User?    @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

/// A ticket is a way to register for an event. May include a price and conditions.
model Ticket {
  id                    String          @id @default(dbgenerated("nanoid('t:')"))
  eventId               String
  authorId              String?
  ticketGroupId         String?
  name                  String          @db.VarChar(255)
  description           String          @db.VarChar(255)
  opensAt               DateTime?
  closesAt              DateTime?
  price                 Float // in EUR
  capacity              Int             @default(0) // 0 means unlimited
  registrations         Registration[]
  links                 LinkCollection  @relation(fields: [linkCollectionId], references: [id])
  allowedPaymentMethods PaymentMethod[] @default([]) // empty means all
  author                User?           @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: SetNull)

  // Conditions for that ticket.
  openToPromotions        Int[]    @default([])
  openToAlumni            Boolean? @default(false) // false means only non-alumni, true means only alumni, null means both
  openToExternal          Boolean? @default(false) // same thing
  openToNonAEContributors Boolean? @default(false) // same thing
  openToSchools           School[]
  openToGroups            Group[]
  godsonLimit             Int      @default(0) // 0 means unlimited

  onlyManagersCanProvide Boolean @default(false)

  event            Event        @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  group            TicketGroup? @relation(fields: [ticketGroupId], references: [id])
  linkCollectionId String
}

/// A reservation is a user's registration for a ticket
model Registration {
  id            String        @id @default(dbgenerated("nanoid('r:')"))
  ticketId      String
  beneficiary   String        @default("")
  authorId      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentMethod PaymentMethod
  paid          Boolean       @default(false)

  ticket Ticket @relation(fields: [ticketId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([ticketId, beneficiary])
}

enum PaymentMethod {
  Lydia
  Card
  Transfer
  Check
  Cash
  Other
}

/// A log entry is a log of an action that happened on the website
model LogEntry {
  id         String   @id @default(dbgenerated("nanoid('log:')"))
  happenedAt DateTime @default(now())
  userId     String?
  area       String   @db.VarChar(255) // billeterie, gestion clubs, etc. à typer, mais pas dans la DB (pour être plus flexible)
  message    String   @db.Text

  user User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
}

/// A Lydia account
model LydiaAccount {
  id           String  @id @default(dbgenerated("nanoid('lydia:')"))
  groupId      String
  group        Group   @relation(fields: [groupId], references: [id])
  name         String  @default("") @db.VarChar(255)
  uid          String  @unique
  privateToken String  @default("") @db.VarChar(255)
  vendorToken  String  @default("") @db.VarChar(255)
  events       Event[]
}

/// A bar week is a week during which some groups takeover the bar staff
model BarWeek {
  id          String   @id @default(dbgenerated("nanoid('barweek:')"))
  uid         String   @unique
  groups      Group[]
  startsAt    DateTime
  endsAt      DateTime
  description String   @default("") @db.VarChar(255)
}
