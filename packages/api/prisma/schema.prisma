generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "../src/prisma-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// A User
model User {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  firstname String   @db.VarChar(255)
  nickname  String   @default(dbgenerated("''")) @db.VarChar(255)
  lastname  String   @db.VarChar(255)
  createdAt DateTime @default(now())

  credentials Credential[]
  clubs       ClubMember[]
  articles    Article[]
}

/// The different kinds of credentials
enum CredentialType {
  Password
  Token
}

/// A way for a user to access their account
model Credential {
  id        Int            @id @default(autoincrement())
  userId    Int
  type      CredentialType
  value     String         @db.VarChar(255)
  createdAt DateTime       @default(now())
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

/// A Club
model Club {
  id   Int    @id @default(autoincrement())
  name String

  members  ClubMember[]
  articles Article[]
}

/// The intermediate table between User and Club
model ClubMember {
  memberId        Int
  clubId          Int
  title           String?  @db.VarChar(255)
  president       Boolean  @default(false)
  treasurer       Boolean  @default(false)
  canAddMembers   Boolean  @default(false)
  canPostArticles Boolean  @default(false)
  createdAt       DateTime @default(now())

  member User @relation(fields: [memberId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  club   Club @relation(fields: [clubId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([memberId, clubId])
}

/// An article published by a member of a club
model Article {
  id          Int      @id @default(autoincrement())
  authorId    Int?
  clubId      Int
  title       String   @db.VarChar(255)
  body        String   @db.Text
  published   Boolean  @default(false)
  homepage    Boolean  @default(false)
  createdAt   DateTime @default(now())
  publishedAt DateTime @default(now())

  author User? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  club   Club  @relation(fields: [clubId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
