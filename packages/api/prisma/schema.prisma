generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "../src/prisma-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  majorId        Int
  name           String   @unique @db.VarChar(255)
  email          String   @unique @db.VarChar(255)
  firstname      String   @db.VarChar(255)
  lastname       String   @db.VarChar(255)
  createdAt      DateTime @default(now())
  graduationYear Int      @db.Integer

  // Optional profile details
  address     String    @default("") @db.VarChar(255)
  biography   String    @default("") @db.VarChar(255)
  birthday    DateTime?
  nickname    String    @default("") @db.VarChar(255)
  phone       String    @default("") @db.VarChar(255)
  pictureFile String    @default("") @db.VarChar(255)

  // Permissions
  admin         Boolean @default(false)
  canEditUsers  Boolean @default(false)
  canEditGroups Boolean @default(false)

  articles    Article[]
  groups      GroupMember[]
  credentials Credential[]
  links       UserLink[]
  major       Major         @relation(fields: [majorId], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

enum LinkType {
  Facebook
  Instagram
  Telegram
  Twitter
}

model UserLink {
  id     Int      @id @default(autoincrement())
  userId Int
  type   LinkType
  value  String   @db.VarChar(255)

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Major {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  schools  School[]
  students User[]
}

model School {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  color String @db.VarChar(7)

  groups               Group[]
  majors               Major[]
  studentOrganizations StudentOrganization[]
}

enum CredentialType {
  Password
  Token
}

model Credential {
  id        Int            @id @default(autoincrement())
  userId    Int
  type      CredentialType
  value     String         @db.VarChar(255)
  userAgent String         @default("") @db.VarChar(255)
  createdAt DateTime       @default(now())
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model StudentOrganization {
  id       Int    @id @default(autoincrement())
  schoolId Int
  name     String @unique @db.VarChar(255)
  year     Int    @db.Integer

  school School  @relation(fields: [schoolId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  Group  Group[]
}

enum GroupType {
  Association
  Club
  Group
  Integration
  StudentOrganizationSection
}

model Group {
  id                    Int       @id @default(autoincrement())
  schoolId              Int?
  studentOrganizationId Int?
  name                  String    @db.VarChar(255)
  type                  GroupType
  color                 String    @db.VarChar(7)

  articles            Article[]
  members             GroupMember[]
  school              School?              @relation(fields: [schoolId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  studentOrganization StudentOrganization? @relation(fields: [studentOrganizationId], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

model GroupMember {
  groupId         Int
  memberId        Int
  title           String   @default("") @db.VarChar(255)
  president       Boolean  @default(false)
  treasurer       Boolean  @default(false)
  canEditMembers  Boolean  @default(false)
  canEditArticles Boolean  @default(false)
  createdAt       DateTime @default(now())

  group  Group @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  member User  @relation(fields: [memberId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([groupId, memberId])
}

model Article {
  id          Int      @id @default(autoincrement())
  authorId    Int?
  groupId     Int
  title       String   @db.VarChar(255)
  body        String   @db.Text
  published   Boolean  @default(false)
  homepage    Boolean  @default(false)
  createdAt   DateTime @default(now())
  publishedAt DateTime @default(now())

  author User? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  group  Group @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
