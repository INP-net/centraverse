generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// See https://pothos-graphql.dev/docs/plugins/prisma#setup
generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Users are the people who use the app
model User {
  id        Int      @id @default(autoincrement())
  uid       String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())

  // School details
  schoolServer String? @db.VarChar(255)
  schoolUid    String? @db.VarChar(255)
  schoolEmail  String? @unique @db.VarChar(255)

  // Mandatory profile details
  email          String @unique @db.VarChar(255)
  firstName      String @db.VarChar(255)
  lastName       String @db.VarChar(255)
  majorId        Int
  major          Major  @relation(fields: [majorId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  graduationYear Int

  // Optional profile details
  address          String    @default("") @db.VarChar(255)
  birthday         DateTime?
  description      String    @default("") @db.VarChar(255)
  nickname         String    @default("") @db.VarChar(255)
  phone            String    @default("") @db.VarChar(255)
  pictureFile      String    @default("") @db.VarChar(255)
  linkCollectionId Int

  // Permissions
  admin         Boolean @default(false)
  canEditUsers  Boolean @default(false)
  canEditGroups Boolean @default(false)

  // Relationships
  articles       Article[]
  groups         GroupMember[]
  credentials    Credential[]
  linkCollection LinkCollection @relation(fields: [linkCollectionId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  Reservation    Registration[]
  EventManager   EventManager[]
  LogEntry       LogEntry[]

  @@unique([schoolServer, schoolUid])
}

/// UserCandidates are users in the registration process
model UserCandidate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  email          String  @unique @db.VarChar(255)
  token          String  @unique
  emailValidated Boolean @default(false)

  schoolServer String? @db.VarChar(255)
  schoolUid    String? @db.VarChar(255)
  schoolEmail  String? @unique @db.VarChar(255)

  firstName      String @default("") @db.VarChar(255)
  lastName       String @default("") @db.VarChar(255)
  majorId        Int?
  major          Major? @relation(fields: [majorId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  graduationYear Int?
  password       String @default("") @db.VarChar(255)

  address  String    @default("") @db.VarChar(255)
  birthday DateTime?
  phone    String    @default("") @db.VarChar(255)

  @@unique([schoolServer, schoolUid])
}

/// Social link types
enum LinkType {
  Facebook
  Instagram
  Telegram
  Twitter
}

/// Ways to contact a user or a group outside of the app
model LinkCollection {
  id    Int    @id @default(autoincrement())
  links Link[]

  groups              Group[]
  studentAssociations StudentAssociation[]
  users               User[]
}

/// A single external link
model Link {
  id           Int      @id @default(autoincrement())
  collectionId Int
  type         LinkType
  value        String   @db.VarChar(255)
  createdAt    DateTime @default(now())

  collection LinkCollection @relation(fields: [collectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

/// A school syllabus
model Major {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  schools        School[]
  students       User[]
  userCandidates UserCandidate[]
}

model School {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  color String @db.VarChar(7)

  groups              Group[]
  majors              Major[]
  studentAssociations StudentAssociation[]
}

enum CredentialType {
  Password
  Token
}

/// A credential is a way to authenticate a user
model Credential {
  id        Int            @id @default(autoincrement())
  userId    Int
  type      CredentialType
  value     String         @db.VarChar(255)
  userAgent String         @default("") @db.VarChar(255)
  createdAt DateTime       @default(now())
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

/// There is one student association per school and per year
model StudentAssociation {
  id               Int    @id @default(autoincrement())
  schoolId         Int
  name             String @unique @db.VarChar(255)
  year             Int    @db.Integer
  linkCollectionId Int

  linkCollection LinkCollection @relation(fields: [linkCollectionId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  school         School         @relation(fields: [schoolId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  groups         Group[]
}

/// The different kinds of groups
enum GroupType {
  Association
  Club
  Group
  Integration
  StudentAssociationSection
}

/// A group is a collection of users
model Group {
  id                   Int       @id @default(autoincrement())
  uid                  String    @unique @db.VarChar(255)
  parentId             Int?
  /// Helper field to get a whole tree without processing all groups
  familyId             Int       @default(autoincrement())
  schoolId             Int?
  studentAssociationId Int?
  pictureFile          String    @default("") @db.VarChar(255)
  name                 String    @db.VarChar(255)
  type                 GroupType
  color                String    @db.VarChar(7)
  selfJoinable         Boolean   @default(false)

  address          String @default("") @db.VarChar(255)
  description      String @default("") @db.VarChar(255)
  email            String @default("") @db.VarChar(255)
  longDescription  String @default("")
  linkCollectionId Int

  /// Parent group, from which this group inherits its permissions
  parent   Group?  @relation("parent", fields: [parentId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  children Group[] @relation("parent")

  /// Family root, only created for performance reasons
  familyRoot     Group   @relation("root", fields: [familyId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  familyChildren Group[] @relation("root")

  articles           Article[]
  linkCollection     LinkCollection      @relation(fields: [linkCollectionId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  members            GroupMember[]
  school             School?             @relation(fields: [schoolId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  studentAssociation StudentAssociation? @relation(fields: [studentAssociationId], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

/// The intermediate model between users and groups
model GroupMember {
  groupId         Int
  memberId        Int
  title           String   @default("") @db.VarChar(255)
  president       Boolean  @default(false)
  treasurer       Boolean  @default(false)
  vicePresident   Boolean  @default(false)
  secretary       Boolean  @default(false)
  canEditMembers  Boolean  @default(false)
  canEditArticles Boolean  @default(false)
  createdAt       DateTime @default(now())

  group  Group @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  member User  @relation(fields: [memberId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([groupId, memberId])
}

/// An article is a post in a group
model Article {
  id          Int             @id @default(autoincrement())
  authorId    Int?
  groupId     Int
  slug        String          @db.VarChar(255)
  title       String          @db.VarChar(255)
  body        String          @db.Text
  published   Boolean         @default(false)
  homepage    Boolean         @default(false)
  createdAt   DateTime        @default(now())
  publishedAt DateTime        @default(now())
  images      Image[]
  actions     ArticleAction[]

  author  User?  @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  group   Group  @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Event   Event? @relation(fields: [eventId], references: [id])
  eventId Int?

  @@unique([groupId, slug])
}

model Image {
  id        String   @id @default(cuid())
  articleId Int
  path      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  position  Int
  alt       String   @default("") @db.VarChar(255)

  article Article @relation(fields: [articleId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([articleId, position])
}

/// An event action is something that a user can do and is related to an event. For example, fill out a form, or watch a livestream.
model ArticleAction {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(255)
  url       String @db.VarChar(255)
  articleId Int

  Article Article @relation(fields: [articleId], references: [id])
}

/// An event is a date, time and place, as well as an optional ticket
model Event {
  id             Int             @id @default(autoincrement())
  authorId       Int?
  groupId        Int
  contactMail    String
  beneficiary    LydiaAccount?   @relation(fields: [lydiaAccountId], references: [id])
  description    String          @db.VarChar(255)
  slug           String          @db.VarChar(255)
  title          String          @db.VarChar(255)
  startsAt       DateTime
  endsAt         DateTime
  location       String          @default("") @db.VarChar(255)
  visibility     EventVisibility
  managers       EventManager[]
  tickets        Ticket[]
  ticketGroups   TicketGroup[]
  articles       Article[]
  lydiaAccountId Int?
}

enum EventVisibility {
  Private
  Unlisted
  Restricted
  Public
}

/// An event manager is a user that can scan tickets, and may be able to manage the event
model EventManager {
  id                     Int     @id @default(autoincrement())
  eventId                Int
  userId                 Int
  canVerifyRegistrations Boolean @default(true) // Can scan tickets
  canEdit                Boolean @default(false)
  canEditPermissions     Boolean @default(false)

  event Event @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

/// A ticket group allows for conditions on multiple tickets, such as an upper limit on the sum of registrations in the sub-tickets
model TicketGroup {
  id      Int    @id @default(autoincrement())
  eventId Int
  name    String @db.VarChar(255)

  capacity Int      @default(0) // 0 means unlimited, capacity is on the sum of sub-tickets registrations
  tickets  Ticket[]
  Event    Event    @relation(fields: [eventId], references: [id])
}

/// A ticket is a way to register for an event. May include a price and conditions.
model Ticket {
  id            Int            @id @default(autoincrement())
  eventId       Int
  ticketGroupId Int?
  name          String         @db.VarChar(255)
  description   String         @db.VarChar(255)
  opensAt       DateTime?
  closesAt      DateTime?
  price         Int // in EUR
  capacity      Int            @default(0) // 0 means unlimited
  reservations  Registration[]

  // Conditions for that ticket.
  openToPromotions        Int[]    @default([])
  openToAlumni            Boolean? @default(false) // false means only non-alumni, true means only alumni, null means both
  openToExternal          Boolean? @default(false) // same thing
  openToNonAEContributors Boolean? @default(false) // same thing
  openToSchool            String[] @default([])
  openToGroups            String[] @default([])
  godsonLimit             Int      @default(0) // 0 means unlimited

  onlyManagersCanProvide Boolean @default(false)

  Event       Event        @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  TicketGroup TicketGroup? @relation(fields: [ticketGroupId], references: [id])
}

/// A reservation is a user's registration for a ticket
model Registration {
  id            Int            @id @default(autoincrement())
  ticketId      Int
  beneficiary   String         @default("")
  userId        Int
  name          String         @db.VarChar(255)
  price         Int?
  createdAt     DateTime       @default(now())
  paymentMethod PaymentMethod? // NULL means not paid yet

  ticket Ticket @relation(fields: [ticketId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

enum PaymentMethod {
  Lydia
  Card
  Transfer
  Cash
}

/// A log entry is a log of an action that happened on the website
model LogEntry {
  id         String   @id @default(cuid())
  happenedAt DateTime @default(now())
  userId     Int?
  area       String   @db.VarChar(255) // billeterie, gestion clubs, etc. à typer, mais pas dans la DB (pour être plus flexible)
  message    String   @db.Text

  User User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
}

/// A Lydia account
model LydiaAccount {
  id           Int     @id @default(autoincrement())
  groupId      Int
  description  String  @default("") @db.VarChar(255)
  privateToken String  @default("") @db.VarChar(255)
  vendorToken  String  @default("") @db.VarChar(255)
  Event        Event[]
}
