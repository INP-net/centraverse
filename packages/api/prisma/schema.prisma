generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "../src/prisma-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  majorId     Int
  name        String   @unique @db.VarChar(255)
  firstname   String   @db.VarChar(255)
  nickname    String   @default("") @db.VarChar(255)
  lastname    String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  pictureFile String?  @db.VarChar(255)

  // Permissions
  admin        Boolean @default(false)
  canEditUsers Boolean @default(false)
  canEditClubs Boolean @default(false)

  articles    Article[]
  clubs       ClubMember[]
  credentials Credential[]
  major       Major        @relation(fields: [majorId], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

model Major {
  id   Int    @id @default(autoincrement())
  name String

  schools  School[]
  students User[]
}

model School {
  id   Int    @id @default(autoincrement())
  name String

  clubs  Club[]
  majors Major[]
}

enum CredentialType {
  Password
  Token
}

model Credential {
  id        Int            @id @default(autoincrement())
  userId    Int
  type      CredentialType
  value     String         @db.VarChar(255)
  userAgent String         @default("") @db.VarChar(255)
  createdAt DateTime       @default(now())
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Club {
  id       Int    @id @default(autoincrement())
  schoolId Int
  name     String

  articles Article[]
  members  ClubMember[]
  school   School       @relation(fields: [schoolId], references: [id], onUpdate: Cascade, onDelete: Restrict)
}

model ClubMember {
  clubId          Int
  memberId        Int
  title           String   @default("") @db.VarChar(255)
  president       Boolean  @default(false)
  treasurer       Boolean  @default(false)
  canEditMembers  Boolean  @default(false)
  canEditArticles Boolean  @default(false)
  createdAt       DateTime @default(now())

  club   Club @relation(fields: [clubId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  member User @relation(fields: [memberId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([clubId, memberId])
}

model Article {
  id          Int      @id @default(autoincrement())
  authorId    Int?
  clubId      Int
  title       String   @db.VarChar(255)
  body        String   @db.Text
  published   Boolean  @default(false)
  homepage    Boolean  @default(false)
  createdAt   DateTime @default(now())
  publishedAt DateTime @default(now())

  author User? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  club   Club  @relation(fields: [clubId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
