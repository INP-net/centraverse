import { readdirSync, readFileSync, statSync, writeFileSync } from 'node:fs';
import path from 'node:path';

const UID_REGEX_PATTERN = /^[\w-]{3,255}$/;

function relativeToHere(filepath: string): string {
  return path.join(path.dirname(new URL(import.meta.url).pathname), filepath);
}

function subdirectoriesNames(dir: string): string[] {
  return readdirSync(dir).filter((file) => statSync(path.join(dir, file)).isDirectory());
}

const routes = [
  ...[
    ...subdirectoriesNames('src/routes'),
    ...subdirectoriesNames('src/routes/(app)'),
    ...subdirectoriesNames('src/routes/(external)'),
  ].filter((r) => !/(\(.*\))|(\[.*])/.test(r)),
  ...readdirSync('static/'),
].filter((r) => UID_REGEX_PATTERN.test(r));

const LINE_MARKER_START = '// @generated by src/scripts/generate-reserved-usernames-from-routes.ts';
const LINE_MARKER_END = '// end @generated';

const targetFiles = [relativeToHere('../routes/check-uid/[uid]/+server.ts')];

await Promise.all(
  targetFiles.map(async (file) => {
    const content = readFileSync(file, 'utf8');
    const lines = content.split('\n');
    const start = lines.findIndex((line) => line.includes(LINE_MARKER_START));
    const end = lines.findIndex((line) => line.includes(LINE_MARKER_END));

    if (start === -1 || end === -1)
      throw new Error(`Could not find start or end markers in ${file}`);

    const newLines = [
      ...lines.slice(0, start + 1),
      `const additionalReservedUsernames = new Set([`,
      `  ${routes.map((route) => `'${route.split('/')[0]}'`).join(',\n  ')},`,
      `]);`,
      ...lines.slice(end),
    ];

    writeFileSync(file, newLines.join('\n'));
  }),
);
